apiVersion: v1
kind: Pod
metadata:
  name: webapp-pod
  labels:
    app: webapp
spec:
  serviceAccountName: webapp-sa  # 특정 ServiceAccount 사용
  containers:
  - name: webapp
    image: nginx:1.20
    ports:
    - containerPort: 80
    env:
    - name: KUBERNETES_SERVICE_HOST
      value: "kubernetes.default.svc.cluster.local"
    - name: KUBERNETES_SERVICE_PORT
      value: "443"
    volumeMounts:
    - name: kube-api-access
      mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      readOnly: true
  volumes:
  - name: kube-api-access
    projected:
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
---
# ServiceAccount 토큰을 사용하지 않는 Pod
apiVersion: v1
kind: Pod
metadata:
  name: secure-pod
spec:
  serviceAccountName: secure-sa
  automountServiceAccountToken: false  # 토큰 마운트 비활성화
  containers:
  - name: secure-app
    image: alpine:3.16
    command: ["sleep", "3600"]
---
# API 접근이 필요한 애플리케이션 예시
apiVersion: v1
kind: Pod
metadata:
  name: api-client-pod
spec:
  serviceAccountName: webapp-sa
  containers:
  - name: api-client
    image: curlimages/curl:7.85.0
    command: ["sh", "-c"]
    args:
    - |
      # ServiceAccount 토큰을 사용한 Kubernetes API 접근
      TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
      CACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
      
      echo "Testing API access with ServiceAccount..."
      
      # Pods 조회 테스트
      curl -H "Authorization: Bearer $TOKEN" \
           --cacert $CACERT \
           https://kubernetes.default.svc.cluster.local:443/api/v1/namespaces/$NAMESPACE/pods
      
      sleep 3600